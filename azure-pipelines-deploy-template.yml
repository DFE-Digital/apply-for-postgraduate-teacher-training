parameters:
  debug: false
  subscriptionPrefix:
  subscriptionName:
  environment:
  resourceEnvironmentName:
  serviceName:
  appServicePlanTier: 'Standard'
  appServicePlanSize: '2'
  appServicePlanInstances: 1
  redisCacheSKU: 'Basic'
  redisCacheFamily: 'C'
  redisCacheCapacity: 1
  containerImageReference:
  ciClockCpus: '1'
  ciClockMemory: '1.5'
  ciWorkerCpus: '1'
  ciWorkerMemory: '1.5'
  keyVaultName:
  keyVaultResourceGroup:
  customHostName:
  databaseName:
  databaseUsername:
  databasePassword:
  databaseStorageAutoGrow:
  databaseBackupRetentionDays:
  dockerhubUsername:
  railsSecretKeyBase:
  containerStartTimeLimit: '600'
  warmupPingPath: '/check'
  warmupPingStatus: '200'
  railsEnv: 'production'
  basicAuthEnabled:
  basicAuthUsername:
  basicAuthPassword:
  supportUsername:
  supportPassword:
  authorisedHosts:
  securityAlertEmail: 'apprenticeshipsdevops@education.gov.uk'
  sentryDSN:
  logstashEnable:
  logstashRemote:
  logstashHost:
  logstashPort:
  logstashSsl:
  govukNotifyAPIKey:
  findBaseUrl:
  dfeSignInClientId:
  dfeSignInSecret:
  dfeSignInIssuer:
  stateChangeSlackUrl:
  customAvailabilityMonitors: []
  alertRecipientEmails: []

jobs:
  - deployment: deploy_${{parameters.resourceEnvironmentName}}
    displayName: 'Deploy App to ${{parameters.subscriptionName}} Subscription'
    environment: '${{parameters.serviceName}}-${{parameters.environment}}'
    #Your build pipeline references an undefined variable named ‘dockerHubUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
    #Your build pipeline references a secret variable named ‘databasePassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
    #Your build pipeline references a secret variable named ‘secretKeyBase’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
    variables:
      resourceGroupName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}'
      appServiceName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-as'
      redisCacheName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-redis'
      containerInstanceNamePrefix: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-ci'
      system.debug: ${{parameters.debug}}

    pool:
      vmImage: vs2017-win2016

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceGroupDeployment@2
            displayName: 'Azure Deployment:Create Or Update Resource Group action on $(resourceGroupName)'
            condition: succeeded()
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              resourceGroupName: '$(resourceGroupName)'
              location: 'West Europe'
              csmFile: '$(Pipeline.Workspace)\arm_template\template.json'
              overrideParameters: '-localBranchName "$(Build.SourceBranchName)"
                -resourceEnvironmentName "${{parameters.resourceEnvironmentName}}"
                -serviceName "${{parameters.serviceName}}"
                -dockerHubUsername "${{parameters.dockerHubUsername}}"
                -containerImageReference "${{parameters.containerImageReference}}"
                -railsEnv "${{parameters.railsEnv}}"
                -keyVaultName "${{parameters.keyVaultName}}"
                -keyVaultResourceGroup "${{parameters.keyVaultResourceGroup}}"
                -customHostName "${{parameters.customHostName}}"
                -appServicePlanTier "${{parameters.appServicePlanTier}}"
                -appServicePlanSize "${{parameters.appServicePlanSize}}"
                -appServicePlanInstances "${{parameters.appServicePlanInstances}}"
                -redisCacheSKU ${{parameters.redisCacheSKU}}
                -redisCacheFamily ${{parameters.redisCacheFamily}}
                -redisCacheCapacity ${{parameters.redisCacheCapacity}}
                -ciClockCpus ${{parameters.ciClockCpus}}
                -ciClockMemory ${{parameters.ciClockMemory}}
                -ciWorkerCpus ${{parameters.ciWorkerCpus}}
                -ciWorkerMemory ${{parameters.ciWorkerMemory}}
                -databaseName "${{parameters.databaseName}}"
                -databaseUsername "${{parameters.databaseUsername}}"
                -databasePassword "${{parameters.databasePassword}}"
                -databaseStorageAutoGrow "${{parameters.databaseStorageAutoGrow}}"
                -databaseBackupRetentionDays "${{parameters.databaseBackupRetentionDays}}"
                -environment "${{parameters.environment}}"
                -securityAlertEmail "${{parameters.securityAlertEmail}}"
                -secretKeyBase "${{parameters.railsSecretKeyBase}}"
                -containerStartTimeLimit "${{parameters.containerStartTimeLimit}}"
                -warmupPingPath "${{parameters.warmupPingPath}}"
                -warmupPingStatus "${{parameters.warmupPingStatus}}"
                -govukNotifyAPIKey "${{parameters.govukNotifyAPIKey}}"
                -basicAuthEnabled "${{parameters.basicAuthEnabled}}"
                -basicAuthUsername "${{parameters.basicAuthUsername}}"
                -basicAuthPassword "${{parameters.basicAuthPassword}}"
                -supportUsername "${{parameters.supportUsername}}"
                -supportPassword "${{parameters.supportPassword}}"
                -authorisedHosts "${{parameters.authorisedHosts}}"
                -sentryDSN "${{parameters.sentryDSN}}"
                -logstashEnable "${{parameters.logstashEnable}}"
                -logstashRemote "${{parameters.logstashRemote}}"
                -logstashHost "${{parameters.logstashHost}}"
                -logstashPort "${{parameters.logstashPort}}"
                -logstashSsl "${{parameters.logstashSsl}}"
                -findBaseUrl "${{parameters.findBaseUrl}}"
                -redisCacheName "$(redisCacheName)"
                -containerInstanceNamePrefix "$(containerInstanceNamePrefix)"
                -dfeSignInClientId "${{parameters.dfeSignInClientId}}"
                -stateChangeSlackUrl "${{parameters.stateChangeSlackUrl}}"
                -dfeSignInSecret "${{parameters.dfeSignInSecret}}"
                -dfeSignInIssuer "${{parameters.dfeSignInIssuer}}"
                -customAvailabilityMonitors "${{parameters.customAvailabilityMonitors}}"
                -alertRecipientEmails "${{parameters.alertRecipientEmails}}"'
              deploymentOutputs: DeploymentOutput

          - task: AzurePowerShell@3
            displayName: 'Azure PowerShell Script - Tag resource group: $(resourceGroupName)'
            condition: succeeded()
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: InlineScript
              azurePowerShellVersion: LatestVersion
              Inline: |
                Param(
                  [string] $resourceGroupName = "$(resourceGroupName)",
                  [string] $environment = "${{parameters.environment}}"
                )

                Set-AzureRmResourceGroup -Name $resourceGroupName -Tag @{
                  Version = "$(Build.SourceVersion)";
                  Environment = "$environment"
                }


          - task: AzureAppServiceManage@0
            displayName: 'Start Azure App Service: $(appServiceName)'
            condition: succeeded()
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              Action: 'Start Azure App Service'
              WebAppName: '$(appServiceName)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(resourceGroupName)'
              Slot: staging


          - task: AzurePowerShell@3
            displayName: 'Azure PowerShell Script - Web App Warmup: $(appServiceName)'
            condition: succeeded()
            timeoutInMinutes: 15
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: InlineScript
              azurePowerShellVersion: LatestVersion
              Inline: |
                Param(
                  [string] $appservicename = "$(appServiceName)",
                  [string] $path = "${{parameters.warmupPingPath}}",
                  [int]$timeoutInMinutes = 5,
                  [int]$sleepDelaySeconds = 10
                )

                $result = @()
                $restartCount = 1

                #Get current date and time for timeout properties
                $startTime = (get-date).ToString()

                #Timer starts now
                write-output "Elapsed:00:00:00"
                $continue = $true

                $uri = ("{0}-staging.azurewebsites.net{1}" -f $appservicename, $path)

                While ( $continue )
                {
                  $webrequest = try {

                    $request = $null
                    ## Request the URI, and measure how long the response took.
                    $result1 = Measure-Command { $request = Invoke-WebRequest -Uri "https://$uri" -MaximumRedirection 0 -ErrorAction Ignore }
                    write-output **Time taken to invoke web request: $result1.TotalMilliseconds **
                    $request
                  }
                  catch {
                    $request = $_.Exception.Response
                    $time = -1
                  }

                  $result = [PSCustomObject] @{
                    Time = Get-Date;
                    Uri = $uri;
                    StatusCode = [int] $request.StatusCode;
                    StatusDescription = $request.StatusDescription;
                    ResponseLength = $request.RawContentLength;
                    TimeTaken =  $time.TotalMilliseconds;
                    WebRequest = $webrequest
                  }

                  $sleeprequired = $false
                  $outputstatuscode=$result.StatusCode
                  $outputuri=($result.uri).ToString()
                  $outputwebrequest= $result.WebRequest.headers.location
                  if ($result.StatusCode -eq 200 ) {
                    Write-output "$outputuri is up and running. Status code = $outputstatuscode"
                  }
                  elseif($result.StatusCode -eq 302) {
                    Write-Output "$outputuri is up and running. Redirection is in place. Status code = $outputstatuscode "
                    Write-Output "$outputuri is redirected to $outputwebrequest "
                  }
                  else {
                    Write-Output "$outputuri site is currently down or unreachable"
                    $sleeprequired = $true
                    # Remove comment to display extra info # write-output $result | fl
                    #reseting previous result
                    $result = @()
                  }

                  $currenttime = (get-date).ToString()
                  $elapsedTime = new-timespan $startTime $currenttime
                  write-output "Elapsed:$($elapsedTime.ToString("hh\:mm\:ss"))"

                  #Handle event
                  if ( $elapsedTime.Minutes -ge $timeoutInMinutes ) {
                    if ( $restartCount -gt 0 ) {
                      write-output "Restarting web app in staging slot..."
                      Restart-AzureRmWebAppSlot -ResourceGroupName $(resourceGroupName) -Name $(appServiceName) -Slot "staging"
                      $startTime = (get-date).ToString()
                      $restartCount--
                    } else {
                      exit(1)
                    }
                  } elseif ( $sleeprequired -eq $false) {
                    exit(0)
                  } else {
                    write-output ("Sleeping for {0}s..." -f $sleepDelaySeconds)
                    Start-Sleep $sleepDelaySeconds
                  }
                }


          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: $(appServiceName)'
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              WebAppName: '$(appServiceName)'
              ResourceGroupName: '$(resourceGroupName)'
              SourceSlot: staging
            condition: succeeded()


          - task: AzureAppServiceManage@0
            displayName: 'Stop Azure App Service: $(appServiceName)'
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              Action: 'Stop Azure App Service'
              WebAppName: '$(appServiceName)'
              SpecifySlotOrASE: true
              ResourceGroupName: '$(resourceGroupName)'
              Slot: staging
            condition: succeeded()
