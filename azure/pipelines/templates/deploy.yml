parameters:
  debug: false
  subscriptionPrefix:
  subscriptionName:
  environment:
  resourceEnvironmentName:
  serviceName:
  appServicePlanTier: 'Standard'
  appServicePlanSize: '2'
  appServicePlanInstances: 1
  redisCacheSKU: 'Basic'
  redisCacheFamily: 'C'
  redisCacheCapacity: 1
  containerImageReference:
  ciClockCpus: '1'
  ciClockMemory: '1.5'
  ciWorkerCpus: '1'
  ciWorkerMemory: '1.5'
  databaseName:
  databaseUsername:
  databasePassword:
  databaseStorageAutoGrow:
  databaseBackupRetentionDays:
  dockerhubUsername:
  railsSecretKeyBase:
  containerStartTimeLimit: '600'
  warmupPingPath: '/check'
  warmupPingStatus: '200'
  railsEnv: 'production'
  basicAuthEnabled:
  basicAuthUsername:
  basicAuthPassword:
  supportUsername:
  supportPassword:
  authorisedHosts:
  securityAlertEmail: 'teacher-services-infra@digital.education.gov.uk'
  sentryDSN:
  logstashEnable:
  logstashRemote:
  logstashHost:
  logstashPort:
  logstashSsl:
  googleMapsAPIKey:
  govukNotifyAPIKey:
  findBaseUrl:
  dfeSignInClientId:
  dfeSignInSecret:
  dfeSignInIssuer:
  stateChangeSlackUrl:
  customAvailabilityMonitors: []
  alertRecipientEmails: []
  alertSlackChannel: "#twd_apply_devops"
  logRetentionDays: 365
  sandbox:
  commonResourceTags: '{
    "Portfolio": "Early Years and Schools Group",
    "Product": "Apply for postgraduate teacher training",
    "Service": "Teacher services",
    "Service Line": "Teaching Workforce"
  }'
  govukNotifyCallbackAPIKey:
  dsiApiUrl:
  dsiApiSecret:
  teacherTrainingApiBaseUrl: https://api.publish-teacher-training-courses.service.gov.uk/api/public/v1
  ucasUsername:
  ucasPassword:
  ucasZipPassword:
  skylightAuthToken:
  skylightEnable: 'false'
  googleAnalyticsApply:
  googleAnalyticsManage:

jobs:
  - deployment: deploy_${{parameters.resourceEnvironmentName}}
    displayName: 'Deploy App to ${{parameters.subscriptionName}} Subscription'
    environment: '${{parameters.serviceName}}-${{parameters.environment}}'
    variables:
      resourceGroupName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}'
      appServiceName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-as'
      redisCacheName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-redis'
      containerInstanceNamePrefix: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-ci'
      system.debug: ${{parameters.debug}}

    pool:
      vmImage: windows-2019

    strategy:
      runOnce:
        deploy:
          steps:
          - template: cancel-build-if-not-latest.yml
            parameters:
              sourceBranchName: $(Build.SourceBranchName)

          - task: AzurePowerShell@4
            displayName: 'Azure PowerShell Script - Set Deployment Start Time'
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: InlineScript
              azurePowerShellVersion: LatestVersion
              Inline: |
                Write-Host "##vso[task.setvariable variable=deploymentStartTime]$(Get-Date)"
                Write-Host "##vso[task.setvariable variable=fullDeployment]$true"

          - task: AzureCLI@2
            displayName: 'Check if read replica postgres server exists in $(resourceGroupName)'
            env:
              REPLICA_SERVER_NAME: ${{ format('{0}-psql-replica', variables.resourceGroupName) }}
              RESOURCE_GROUP_NAME: $(resourceGroupName)
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: pscore
              ScriptLocation: inlineScript
              inlineScript: |
                $replicaServer = az postgres server list --resource-group $env:RESOURCE_GROUP_NAME | ConvertFrom-Json | where name -eq $env:REPLICA_SERVER_NAME
                Write-Host "##vso[task.setvariable variable=databaseReplicaExists]$($replicaServer -ne $null)"

          - task: AzureResourceGroupDeployment@2
            displayName: 'ARM Deployment - Create Or Update Resource Group action on $(resourceGroupName)'
            condition: and(eq(variables['buildCancelled'], false), or(eq(variables['fullDeployment'], true), eq(variables['overrideFullDeployment'], true) ))
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              resourceGroupName: '$(resourceGroupName)'
              location: 'West Europe'
              csmFile: '$(Pipeline.Workspace)\arm_template\template.json'
              overrideParameters: '-localBranchName "$(Build.SourceBranchName)"
                -commonResourceTags ${{parameters.commonResourceTags}}
                -subscriptionPrefix ${{parameters.subscriptionPrefix}}
                -resourceEnvironmentName "${{parameters.resourceEnvironmentName}}"
                -serviceName "${{parameters.serviceName}}"
                -dockerRegistryUsername "$(dockerRegistryUsername)"
                -dockerRegistryPassword "$(dockerRegistryPassword)"
                -containerImageReference "${{parameters.containerImageReference}}"
                -railsEnv "${{parameters.railsEnv}}"
                -customDomains $(customDomains)
                -appServicePlanTier "${{parameters.appServicePlanTier}}"
                -appServicePlanSize "${{parameters.appServicePlanSize}}"
                -appServicePlanInstances "${{parameters.appServicePlanInstances}}"
                -redisCacheSKU ${{parameters.redisCacheSKU}}
                -redisCacheFamily ${{parameters.redisCacheFamily}}
                -redisCacheCapacity ${{parameters.redisCacheCapacity}}
                -ciClockCpus ${{parameters.ciClockCpus}}
                -ciClockMemory ${{parameters.ciClockMemory}}
                -ciWorkerCpus ${{parameters.ciWorkerCpus}}
                -ciWorkerMemory ${{parameters.ciWorkerMemory}}
                -databaseName "${{parameters.databaseName}}"
                -databaseUsername "${{parameters.databaseUsername}}"
                -databasePassword "${{parameters.databasePassword}}"
                -postgresAdminUsername "$(postgresAdminUsername)"
                -postgresAdminPassword "$(postgresAdminPassword)"
                -databaseStorageAutoGrow "${{parameters.databaseStorageAutoGrow}}"
                -databaseBackupRetentionDays "${{parameters.databaseBackupRetentionDays}}"
                -databaseReplicaExists "$(databaseReplicaExists)"
                -environment "${{parameters.environment}}"
                -securityAlertEmail "${{parameters.securityAlertEmail}}"
                -secretKeyBase "${{parameters.railsSecretKeyBase}}"
                -containerStartTimeLimit "${{parameters.containerStartTimeLimit}}"
                -warmupPingPath "${{parameters.warmupPingPath}}"
                -warmupPingStatus "${{parameters.warmupPingStatus}}"
                -googleMapsAPIKey "${{parameters.googleMapsAPIKey}}"
                -govukNotifyAPIKey "${{parameters.govukNotifyAPIKey}}"
                -basicAuthUsername "${{parameters.basicAuthUsername}}"
                -basicAuthPassword "${{parameters.basicAuthPassword}}"
                -authorisedHosts "${{parameters.authorisedHosts}}"
                -sentryDSN "${{parameters.sentryDSN}}"
                -logstashEnable "${{parameters.logstashEnable}}"
                -logstashRemote "${{parameters.logstashRemote}}"
                -logstashHost "${{parameters.logstashHost}}"
                -logstashPort "${{parameters.logstashPort}}"
                -logstashSsl "${{parameters.logstashSsl}}"
                -logitApikey "$(logitApikey)"
                -findBaseUrl "${{parameters.findBaseUrl}}"
                -redisCacheName "$(redisCacheName)"
                -containerInstanceNamePrefix "$(containerInstanceNamePrefix)"
                -dfeSignInClientId "${{parameters.dfeSignInClientId}}"
                -stateChangeSlackUrl "${{parameters.stateChangeSlackUrl}}"
                -dfeSignInSecret "${{parameters.dfeSignInSecret}}"
                -dfeSignInIssuer "${{parameters.dfeSignInIssuer}}"
                -customAvailabilityMonitors "${{parameters.customAvailabilityMonitors}}"
                -alertRecipientEmails "${{parameters.alertRecipientEmails}}"
                -alertSlackChannel "${{parameters.alertSlackChannel}}"
                -logRetentionDays ${{parameters.logRetentionDays}}
                -skylightAuthToken "${{parameters.skylightAuthToken}}"
                -skylightEnable "${{parameters.skylightEnable}}"
                -dsiApiUrl "${{parameters.dsiApiUrl}}"
                -dsiApiSecret "${{parameters.dsiApiSecret}}"
                -ucasUsername "${{parameters.ucasUsername}}"
                -ucasPassword "${{parameters.ucasPassword}}"
                -ucasZipPassword "${{parameters.ucasZipPassword}}"
                -teacherTrainingApiBaseUrl "${{parameters.teacherTrainingApiBaseUrl}}"
                -ucasUploadBaseurl "$(ucasUploadBaseurl)"
                -ucasUploadFolder "$(ucasUploadFolder)"
                -ucasDownloadZipPassword "$(ucasDownloadZipPassword)"
                -govukNotifyCallbackAPIKey "${{parameters.govukNotifyCallbackAPIKey}}"
                -sandbox "${{parameters.sandbox}}"
                -googleAnalyticsApply "${{parameters.googleAnalyticsApply}}"
                -googleAnalyticsManage "${{parameters.googleAnalyticsManage}}"'
              deploymentOutputs: DeploymentOutput

          - task: AzureCLI@2
            displayName: 'Azure CLI - Update Container Images in Resource Group $(resourceGroupName)'
            condition: and(eq(variables['buildCancelled'], false), eq(variables['fullDeployment'], false))
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: ps
              ScriptLocation: inlineScript
              InlineScript: |
                Param(
                  [string] $resourceGroupName = "$(resourceGroupName)",
                  [string] $appServiceName = "$(appServiceName)",
                  [string] $containerImageReference = "${{parameters.containerImageReference}}",
                  [array] $containers = @("clock", "worker")
                )
                $output = az webapp config container set --resource-group $resourceGroupName --name $appServiceName --slot staging --docker-custom-image-name $containerImageReference
                if ( !$output ) {
                  Write-Error -Message "Unable to set image for Web App $($appServiceName)"
                  return
                }

                foreach ( $container in $containers ) {
                  $containerConfig = az deployment group show --resource-group $resourceGroupName --name "container-instances-$($container)" | ConvertFrom-Json

                  $envVars = @()
                  $secureEnvVars = @()
                  foreach ( $var in $containerConfig.properties.parameters.environmentVariables.value ) {
                    foreach ( $key in $var | get-member -MemberType NoteProperty | select -ExpandProperty Name ) {
                      if ( $key -eq "name" ) {
                        $keyName = $var.name
                      } else {
                        if ( $key -eq "value" ) {
                          $keyValuePair = "$keyName=`"$($var.$key)`""
                          $envVars += $keyValuePair
                        } else {
                          $keyValuePair = "$keyName=`"$($var.$key)`""
                          $secureEnvVars += $keyValuePair
                        }
                      }
                    }
                  }

                  $entrypointCommand = "$($containerConfig.properties.parameters.command.value[0..1]) '$($containerConfig.properties.parameters.command.value[2..$containerConfig.properties.parameters.command.value.length])'"
                  write-host ("DEBUG - entrypoint command used for '{0}' container instance: {1}" -f $container, $entrypointCommand)

                  $tags = @()
                  foreach ( $tag in $containerConfig.properties.parameters.resourceTags.value | get-member -MemberType NoteProperty | select -ExpandProperty Name ) {
                    $tags += "`"$($tag)`"=`"$($containerConfig.properties.parameters.resourceTags.value.$tag)`""
                  }

                  $output = az container create --resource-group $resourceGroupName --name $containerConfig.properties.parameters.containerName.value `
                  --location westeurope `
                  --image $containerImageReference `
                  --command-line $entrypointCommand `
                  --cpu $containerConfig.properties.parameters.numberCpuCores.value `
                  --memory $containerConfig.properties.parameters.memory.value `
                  --os-type $containerConfig.properties.parameters.osType.value `
                  --restart-policy $containerConfig.properties.parameters.restartPolicy.value `
                  --environment-variables $envVars `
                  --secure-environment-variables $secureEnvVars
                  if ( !$output ) {
                    Write-Error -Message "Unable to create container instance $($containerConfig.properties.parameters.containerName.value)"
                    return
                  }
                }

          - template: cancel-build-if-not-latest.yml
            parameters:
              sourceBranchName: $(Build.SourceBranchName)

          - template: swap-staging-production-slots.yml
            parameters:
              azureSubscription: ${{parameters.subscriptionName}}
              resourceGroup: $(resourceGroupName)
              appService: $(appServiceName)

          - template: metrics-check.yml
            parameters:
              azureSubscription: ${{ parameters.subscriptionName }}
              resourceGroup: $(resourceGroupName)
              containerName: ${{ format('{0}-{1}', variables.containerInstanceNamePrefix,'wkr') }}

          - template: metrics-check.yml
            parameters:
              azureSubscription: ${{ parameters.subscriptionName }}
              resourceGroup: $(resourceGroupName)
              containerName: ${{ format('{0}-{1}', variables.containerInstanceNamePrefix,'clk') }}

          - powershell: |
              $requestBody = @{
                ref = "refs/heads/master"
                inputs = @{
                  environment = "${{ parameters.environment }}"
                }
              } | ConvertTo-Json

              $authHeaders = @{
               "Accept" = "application/vnd.github.v3+json"
               "Authorization" = "token $($env:GITHUB_TOKEN)"
              }

              Invoke-RestMethod `
              -Method Post `
              -Headers $authHeaders `
              -Body $requestBody `
              -Uri "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training-tests/actions/workflows/smoke-tests.yml/dispatches"
            displayName: 'Trigger smoke tests on GitHub'
            continueOnError: true
            condition: and(succeeded(), eq(variables['buildCancelled'], false), not(eq('${{ parameters.environment }}', 'devops')))
            env:
              GITHUB_TOKEN: $(smokeTestsGitHubToken)
