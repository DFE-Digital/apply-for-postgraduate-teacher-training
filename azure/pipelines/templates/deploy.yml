parameters:
  debug: false
  subscriptionPrefix:
  subscriptionName:
  environment:
  resourceEnvironmentName:
  serviceName:
  appServicePlanTier: 'Standard'
  appServicePlanSize: '2'
  appServicePlanInstances: 1
  redisCacheSKU: 'Basic'
  redisCacheFamily: 'C'
  redisCacheCapacity: 1
  containerImageReference:
  ciClockCpus: '1'
  ciClockMemory: '1.5'
  ciWorkerCpus: '1'
  ciWorkerMemory: '1.5'
  databaseName:
  databaseUsername:
  databasePassword:
  databaseStorageAutoGrow:
  databaseBackupRetentionDays:
  dockerhubUsername:
  railsSecretKeyBase:
  containerStartTimeLimit: '600'
  warmupPingPath: '/check'
  warmupPingStatus: '200'
  railsEnv: 'production'
  basicAuthEnabled:
  basicAuthUsername:
  basicAuthPassword:
  supportUsername:
  supportPassword:
  authorisedHosts:
  securityAlertEmail: 'apprenticeshipsdevops@education.gov.uk'
  sentryDSN:
  logstashEnable:
  logstashRemote:
  logstashHost:
  logstashPort:
  logstashSsl:
  govukNotifyAPIKey:
  findBaseUrl:
  dfeSignInClientId:
  dfeSignInSecret:
  dfeSignInIssuer:
  stateChangeSlackUrl:
  customAvailabilityMonitors: []
  alertRecipientEmails: []
  alertSlackChannel: "#twd_apply_devops"
  logRetentionDays: 365
  sandbox:
  commonResourceTags: '{
    "Parent Business": "Teacher Training and Qualifications",
    "Service Offering": "Apply for postgraduate teacher training"
  }'
  govukNotifyCallbackAPIKey:
  dsiApiUrl:
  dsiApiSecret:
  teacherTrainingApiBaseUrl: https://api.publish-teacher-training-courses.service.gov.uk/api/public/v1
  ucasUsername:
  ucasPassword:
  ucasZipPassword:
  skylightAuthToken:
  skylightEnable: false

jobs:
  - deployment: deploy_${{parameters.resourceEnvironmentName}}
    displayName: 'Deploy App to ${{parameters.subscriptionName}} Subscription'
    environment: '${{parameters.serviceName}}-${{parameters.environment}}'
    variables:
      resourceGroupName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}'
      appServiceName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-as'
      redisCacheName: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-redis'
      containerInstanceNamePrefix: '${{parameters.subscriptionPrefix}}${{parameters.resourceEnvironmentName}}-${{parameters.serviceName}}-ci'
      system.debug: ${{parameters.debug}}

    pool:
      vmImage: windows-2019

    strategy:
      runOnce:
        deploy:
          steps:
          - template: cancel-build-if-not-latest.yml
            parameters:
              sourceBranchName: $(Build.SourceBranchName)

          - task: AzurePowerShell@4
            displayName: 'Azure PowerShell Script - Set Deployment Type for Resource Group $(resourceGroupName)'
            condition: and(succeeded(), eq(variables['buildCancelled'], false))
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)
              COMMIT_HASH: $(build.sourceVersion)
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: InlineScript
              azurePowerShellVersion: LatestVersion
              Inline: |
                param(
                  [string] $resourceGroupName = "$(resourceGroupName)",
                  [string] $environment = "${{parameters.environment}}"
                )

                $fullDeployment = $false
                $encodedAccessToken = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($env:SYSTEM_ACCESSTOKEN))
                $variableGroupLastEdit = @()

                #Check if RG exists
                Get-AzResourceGroup -Name $resourceGroupName -ErrorVariable rgDoesntExist -ErrorAction SilentlyContinue
                if(!$rgDoesntExist){
                  #RG exists, proceed with other checks
                  #Get array of deployment files, which if changed, should trigger a full ARM deployment.
                  #Add pipeline files to array
                  $gitContentsUri = "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training/contents?ref=$env:COMMIT_HASH"
                  $gitApiResponse = Invoke-RestMethod -Method Get -Uri $gitContentsUri -Headers @{Authorization = $encodedAccessToken}
                  $deploymentFiles = $gitApiResponse | Where-Object {$_.name -like "azure-pipelines*.yml"} | Select-Object -ExpandProperty Name
                  #Add ARM template files to array
                  $gitContentsUri = "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training/contents/azure?ref=$env:COMMIT_HASH"
                  $gitApiResponse = Invoke-RestMethod -Method Get -Uri $gitContentsUri -Headers @{Authorization = $encodedAccessToken}
                  $deploymentFiles += $gitApiResponse | Where-Object {$_.name -like "*.json"} | Select-Object -ExpandProperty Name | Foreach-Object { "azure/$_" }
                  write-host ("DEBUG - Deployment files to compare changes against: {0}" -f [system.string]::Join(", ", $deploymentFiles))

                  #Get the timestamp of the last deployment to the defined Azure environment from Azure API
                  $lastDeployment = (Get-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName | Where-Object {$_.DeploymentName -Like "template-*"})[0].Timestamp

                  #Get the commit hash for the current version deployed in the environment
                  $currentDeployedCommit = (Get-AzResourceGroup -Name $resourceGroupName).Tags.Version

                  #Get the timestamp of the last update to the variable groups corresponding to the environment defined
                  $variableGroupUri = "https://dev.azure.com/dfe-ssp/Become-A-Teacher/_apis/distributedtask/variablegroups"
                  $variableGroups = Invoke-RestMethod -Method Get -Uri $variableGroupUri -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}
                  $variableGroupLastEdit += ($variableGroups.value | Where-Object {$_.name -like "APPLY - ENV - $environment"}).modifiedOn
                  $variableGroupLastEdit += ($variableGroups.value | Where-Object {$_.name -eq "APPLY - Shared Variables"}).modifiedOn
                  $variableGroupLastEdit += ($variableGroups.value | Where-Object {$_.name -eq "Docker Shared Variables"}).modifiedOn
                  $variableGroupLastEditTimestamp = Get-Date -Year ($variableGroupLastEdit | sort -descending)[0].substring(0,4) `
                    -Month ($variableGroupLastEdit | sort -descending)[0].substring(5,2) `
                    -Day ($variableGroupLastEdit | sort -descending)[0].substring(8,2) `
                    -Hour ($variableGroupLastEdit | sort -descending)[0].substring(11,2) `
                    -Minute ($variableGroupLastEdit | sort -descending)[0].substring(14,2) `
                    -Second ($variableGroupLastEdit | sort -descending)[0].substring(17,2)

                  #Get the list of files changed in the commit the build was triggered from. If this is a re-run of the same build we will just look at the files changed in that commit"
                  if ( $currentDeployedCommit -eq $env:COMMIT_HASH ) {
                    $gitCompareUri= "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training/commits/$env:COMMIT_HASH"
                  } else {
                    $gitCompareUri= "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training/compare/$currentDeployedCommit...$env:COMMIT_HASH"
                  }
                  $gitChangedFiles = (Invoke-RestMethod -Method Get -Uri $gitCompareUri -Headers @{Authorization = $encodedAccessToken}).files.filename
                  if ( $gitChangedFiles.length -gt 0 ) {
                    write-host ("DEBUG - Changed files list: {0}" -f [system.string]::Join(", ", $gitChangedFiles))
                  } else {
                    write-host ("DEBUG - No files changed in commit.")
                  }

                  if ( $lastDeployment -lt $variableGroupLastEditTimestamp ) {
                    write-host "Full ARM deployment required - Variable group changes detected."
                    $fullDeployment = $true
                  }
                  else {
                    if ( $gitChangedFiles.length -gt 0 ) {
                      foreach ( $file in $deploymentFiles ) {
                        if ( $gitChangedFiles -contains $file ) {
                          $fullDeployment = $true
                          break
                        }
                      }
                      if ( $fullDeployment -eq $false ) {
                        write-host "No ARM deployment required."
                      } else {
                        write-host "Full ARM deployment required - Template/pipeline file changes detected."
                      }
                    } else {
                      write-host "No ARM deployment required. No files or pipeline variables changed."
                    }
                  }
                }
                else{
                  #RG not found, so do a full deployment
                  $fullDeployment = $true
                  Write-Host "Full ARM deployment required as $resourceGroupName not found in subscription."
                }
                Write-Host "##vso[task.setvariable variable=deploymentStartTime]$(Get-Date)"
                Write-Host "##vso[task.setvariable variable=fullDeployment]$fullDeployment"

          - task: AzureResourceGroupDeployment@2
            displayName: 'ARM Deployment - Create Or Update Resource Group action on $(resourceGroupName)'
            condition: and(eq(variables['buildCancelled'], false), or(eq(variables['fullDeployment'], true), eq(variables['overrideFullDeployment'], true) ))
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              resourceGroupName: '$(resourceGroupName)'
              location: 'West Europe'
              csmFile: '$(Pipeline.Workspace)\arm_template\template.json'
              overrideParameters: '-localBranchName "$(Build.SourceBranchName)"
                -commonResourceTags ${{parameters.commonResourceTags}}
                -subscriptionPrefix ${{parameters.subscriptionPrefix}}
                -resourceEnvironmentName "${{parameters.resourceEnvironmentName}}"
                -serviceName "${{parameters.serviceName}}"
                -dockerRegistryUsername "$(dockerRegistryUsername)"
                -dockerRegistryPassword "$(dockerRegistryPassword)"
                -containerImageReference "${{parameters.containerImageReference}}"
                -railsEnv "${{parameters.railsEnv}}"
                -customDomains $(customDomains)
                -appServicePlanTier "${{parameters.appServicePlanTier}}"
                -appServicePlanSize "${{parameters.appServicePlanSize}}"
                -appServicePlanInstances "${{parameters.appServicePlanInstances}}"
                -redisCacheSKU ${{parameters.redisCacheSKU}}
                -redisCacheFamily ${{parameters.redisCacheFamily}}
                -redisCacheCapacity ${{parameters.redisCacheCapacity}}
                -ciClockCpus ${{parameters.ciClockCpus}}
                -ciClockMemory ${{parameters.ciClockMemory}}
                -ciWorkerCpus ${{parameters.ciWorkerCpus}}
                -ciWorkerMemory ${{parameters.ciWorkerMemory}}
                -databaseName "${{parameters.databaseName}}"
                -databaseUsername "${{parameters.databaseUsername}}"
                -databasePassword "${{parameters.databasePassword}}"
                -databaseStorageAutoGrow "${{parameters.databaseStorageAutoGrow}}"
                -databaseBackupRetentionDays "${{parameters.databaseBackupRetentionDays}}"
                -environment "${{parameters.environment}}"
                -securityAlertEmail "${{parameters.securityAlertEmail}}"
                -secretKeyBase "${{parameters.railsSecretKeyBase}}"
                -containerStartTimeLimit "${{parameters.containerStartTimeLimit}}"
                -warmupPingPath "${{parameters.warmupPingPath}}"
                -warmupPingStatus "${{parameters.warmupPingStatus}}"
                -govukNotifyAPIKey "${{parameters.govukNotifyAPIKey}}"
                -basicAuthUsername "${{parameters.basicAuthUsername}}"
                -basicAuthPassword "${{parameters.basicAuthPassword}}"
                -authorisedHosts "${{parameters.authorisedHosts}}"
                -sentryDSN "${{parameters.sentryDSN}}"
                -logstashEnable "${{parameters.logstashEnable}}"
                -logstashRemote "${{parameters.logstashRemote}}"
                -logstashHost "${{parameters.logstashHost}}"
                -logstashPort "${{parameters.logstashPort}}"
                -logstashSsl "${{parameters.logstashSsl}}"
                -logitApikey "$(logitApikey)"
                -findBaseUrl "${{parameters.findBaseUrl}}"
                -redisCacheName "$(redisCacheName)"
                -containerInstanceNamePrefix "$(containerInstanceNamePrefix)"
                -dfeSignInClientId "${{parameters.dfeSignInClientId}}"
                -stateChangeSlackUrl "${{parameters.stateChangeSlackUrl}}"
                -dfeSignInSecret "${{parameters.dfeSignInSecret}}"
                -dfeSignInIssuer "${{parameters.dfeSignInIssuer}}"
                -customAvailabilityMonitors "${{parameters.customAvailabilityMonitors}}"
                -alertRecipientEmails "${{parameters.alertRecipientEmails}}"
                -alertSlackChannel "${{parameters.alertSlackChannel}}"
                -logRetentionDays ${{parameters.logRetentionDays}}
                -skylightAuthToken "${{parameters.skylightAuthToken}}"
                -skylightEnable ${{parameters.skylightEnable}}
                -dsiApiUrl "${{parameters.dsiApiUrl}}"
                -dsiApiSecret "${{parameters.dsiApiSecret}}"
                -ucasUsername "${{parameters.ucasUsername}}"
                -ucasPassword "${{parameters.ucasPassword}}"
                -ucasZipPassword "${{parameters.ucasZipPassword}}"
                -teacherTrainingApiBaseUrl "${{parameters.teacherTrainingApiBaseUrl}}"
                -ucasUploadBaseurl "$(ucasUploadBaseurl)"
                -ucasUploadFolder "$(ucasUploadFolder)"
                -ucasDownloadZipPassword "$(ucasDownloadZipPassword)"
                -govukNotifyCallbackAPIKey "${{parameters.govukNotifyCallbackAPIKey}}"
                -sandbox "${{parameters.sandbox}}"'
              deploymentOutputs: DeploymentOutput

          - task: AzureCLI@2
            displayName: 'Azure CLI - Update Container Images in Resource Group $(resourceGroupName)'
            condition: and(eq(variables['buildCancelled'], false), eq(variables['fullDeployment'], false))
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: ps
              ScriptLocation: inlineScript
              InlineScript: |
                Param(
                  [string] $resourceGroupName = "$(resourceGroupName)",
                  [string] $appServiceName = "$(appServiceName)",
                  [string] $containerImageReference = "${{parameters.containerImageReference}}",
                  [array] $containers = @("clock", "worker")
                )
                $output = az webapp config container set --resource-group $resourceGroupName --name $appServiceName --slot staging --docker-custom-image-name $containerImageReference
                if ( !$output ) {
                  Write-Error -Message "Unable to set image for Web App $($appServiceName)"
                  return
                }

                foreach ( $container in $containers ) {
                  $containerConfig = az deployment group show --resource-group $resourceGroupName --name "container-instances-$($container)" | ConvertFrom-Json

                  $envVars = @()
                  $secureEnvVars = @()
                  foreach ( $var in $containerConfig.properties.parameters.environmentVariables.value ) {
                    foreach ( $key in $var | get-member -MemberType NoteProperty | select -ExpandProperty Name ) {
                      if ( $key -eq "name" ) {
                        $keyName = $var.name
                      } else {
                        if ( $key -eq "value" ) {
                          $keyValuePair = "$keyName=`"$($var.$key)`""
                          $envVars += $keyValuePair
                        } else {
                          $keyValuePair = "$keyName=`"$($var.$key)`""
                          $secureEnvVars += $keyValuePair
                        }
                      }
                    }
                  }

                  $entrypointCommand = "$($containerConfig.properties.parameters.command.value[0..1]) '$($containerConfig.properties.parameters.command.value[2..$containerConfig.properties.parameters.command.value.length])'"
                  write-host ("DEBUG - entrypoint command used for '{0}' container instance: {1}" -f $container, $entrypointCommand)

                  $tags = @()
                  foreach ( $tag in $containerConfig.properties.parameters.resourceTags.value | get-member -MemberType NoteProperty | select -ExpandProperty Name ) {
                    $tags += "`"$($tag)`"=`"$($containerConfig.properties.parameters.resourceTags.value.$tag)`""
                  }

                  $output = az container create --resource-group $resourceGroupName --name $containerConfig.properties.parameters.containerName.value `
                  --location westeurope `
                  --image $containerImageReference `
                  --command-line $entrypointCommand `
                  --cpu $containerConfig.properties.parameters.numberCpuCores.value `
                  --memory $containerConfig.properties.parameters.memory.value `
                  --os-type $containerConfig.properties.parameters.osType.value `
                  --restart-policy $containerConfig.properties.parameters.restartPolicy.value `
                  --environment-variables $envVars `
                  --secure-environment-variables $secureEnvVars
                  if ( !$output ) {
                    Write-Error -Message "Unable to create container instance $($containerConfig.properties.parameters.containerName.value)"
                    return
                  }
                }

          - task: AzurePowerShell@4
            displayName: 'Azure PowerShell Script - Tag resource group: $(resourceGroupName)'
            condition: and(succeeded(), eq(variables['buildCancelled'], false))
            inputs:
              azureSubscription: '${{parameters.subscriptionName}}'
              ScriptType: InlineScript
              azurePowerShellVersion: LatestVersion
              Inline: |
                Param(
                  [string] $resourceGroupName = "$(resourceGroupName)",
                  [string] $commonResourceTags = '${{parameters.commonResourceTags}}',
                  [string] $environment = "${{parameters.environment}}"
                )

                $environment_tags = @{
                  qa = "development";
                  devops = "development";
                  staging = "test";
                  sandbox = "test";
                  production = "production"
                }

                $tags = @{
                  Version = "$(Build.SourceVersion)";
                  Environment = $environment_tags[$environment]
                }

                (ConvertFrom-Json $commonResourceTags).psobject.properties | Foreach { $tags[$_.Name] = $_.Value }

                Set-AzResourceGroup -Name $resourceGroupName -Tag $tags

          - template: cancel-build-if-not-latest.yml
            parameters:
              sourceBranchName: $(Build.SourceBranchName)

          - template: swap-staging-production-slots.yml
            parameters:
              azureSubscription: ${{parameters.subscriptionName}}
              resourceGroup: $(resourceGroupName)
              appService: $(appServiceName)

          - template: metrics-check.yml
            parameters:
              azureSubscription: ${{ parameters.subscriptionName }}
              resourceGroup: $(resourceGroupName)
              containerName: ${{ format('{0}-{1}', variables.containerInstanceNamePrefix,'wkr') }}

          - template: metrics-check.yml
            parameters:
              azureSubscription: ${{ parameters.subscriptionName }}
              resourceGroup: $(resourceGroupName)
              containerName: ${{ format('{0}-{1}', variables.containerInstanceNamePrefix,'clk') }}

          - powershell: |
              $requestBody = @{
                ref = "refs/heads/master"
                inputs = @{
                  environment = "${{ parameters.environment }}"
                }
              } | ConvertTo-Json

              $authHeaders = @{
               "Accept" = "application/vnd.github.v3+json"
               "Authorization" = "token $($env:GITHUB_TOKEN)"
              }

              Invoke-RestMethod `
              -Method Post `
              -Headers $authHeaders `
              -Body $requestBody `
              -Uri "https://api.github.com/repos/DFE-Digital/apply-for-teacher-training-tests/actions/workflows/smoke-tests.yml/dispatches"
            displayName: 'Trigger smoke tests on GitHub'
            continueOnError: true
            condition: and(succeeded(), eq(variables['buildCancelled'], false), not(eq('${{ parameters.environment }}', 'devops')))
            env:
              GITHUB_TOKEN: $(smokeTestsGitHubToken)
