parameters:
  - name: azureSubscription
    displayName: Azure Subscription Service Connection
    type: string
  - name: appService
    displayName: Name of the Azure App Service
    type: string
  - name: resourceGroup
    displayName: Name of the Azure Resource resourceGroup
    type: string

steps:
  - task: AzureAppServiceManage@0
    condition: eq(variables.buildCancelled, false)
    displayName: Start Staging slot in ${{ parameters.appService }}
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      Action: 'Start Azure App Service'
      WebAppName: '${{ parameters.appService }}'
      SpecifySlotOrASE: true
      ResourceGroupName: '${{ parameters.resourceGroup }}'
      Slot: 'staging'

  - task: PowerShell@2
    condition: eq(variables.buildCancelled, false)
    displayName: 'GET /check in ${{ parameters.appService }}-staging'
    inputs:
      targetType: 'inline'
      script: |
        $appServiceName = "${{ parameters.appService }}"
        # Wait 30 seconds for slot to wake up
        Start-Sleep -Seconds 30
        $healthCheckUrl = [string]::Format("https://{0}-staging.azurewebsites.net/check", $appServiceName)
        $maxAttempts = 5;
        $statusCode = 0;
        $attempt=0
        while($attempt -lt $maxAttempts){
          $attempt = $attempt + 1
          try
          {
              $response = Invoke-WebRequest -Uri $healthCheckUrl -TimeoutSec 120 -ErrorAction Stop
              $statusCode = $response.StatusCode
              break;
          }
          catch
          {
              $statusCode = $_.Exception.Response.StatusCode.value__
              $waitSeconds = $attempt * 10
              Write-Warning "Retrying GET $healthCheckUrl in $waitSeconds seconds..."
              Start-Sleep -Seconds $waitSeconds
          }
        }
        
        if($statusCode -ne 200){
          Write-Warning "GET $healthCheckUrl failed; after $attempt attempts"
          Write-Error "GET $healthCheckUrl failed with status code $statusCode"
        }
        else{ 
          Write-Host "GET $healthCheckUrl succeeded after $attempt attempt(s)"
        }          

  - task: AzureAppServiceManage@0
    condition: eq(variables.buildCancelled, false)
    displayName: Swap Staging slot to Production
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      Action: 'Swap Slots'
      WebAppName: '${{ parameters.appService }}'
      ResourceGroupName: '${{ parameters.resourceGroup }}'
      SourceSlot: 'staging'          

  - task: AzureAppServiceManage@0
    condition: eq(variables.buildCancelled, false)
    displayName: Stop Staging slot in ${{ parameters.appService }}
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      Action: 'Stop Azure App Service'
      WebAppName: '${{ parameters.appService }}'
      SpecifySlotOrASE: true
      ResourceGroupName: '${{ parameters.resourceGroup }}'
      Slot: 'staging'
